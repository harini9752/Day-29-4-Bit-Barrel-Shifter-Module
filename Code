module four_bit_barrel_shifter (
  input [3:0] data_in,
  input [1:0] shift_amount,
  input wire shift_direction,  // 0: Left shift, 1: Right shift
  output reg [3:0] shifted_data
);

  always @(data_in or shift_amount or shift_direction) begin
    case (shift_direction)
      0: shifted_data = (shift_amount == 2'b00) ? data_in : (shift_amount == 2'b01) ? {data_in[2:0], data_in[3]} : (shift_amount == 2'b10) ? {data_in[1:0], data_in[3:2]} : {data_in[0], data_in[3:1]}; // Left shift
      1: shifted_data = (shift_amount == 2'b00) ? data_in : (shift_amount == 2'b01) ? {data_in[3], data_in[0:2]} : (shift_amount == 2'b10) ? {data_in[2:0], data_in[3]} : {data_in[1:3], data_in[0]}; // Right shift
      default: shifted_data = 4'b0;  // Default: output 0
    endcase
  end

endmodule
